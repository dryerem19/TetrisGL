#pragma once
#include "KeyCode.h"

class Input
{
public:

	/**
	* @brief Инициализирует подсистему обработки событий ввода.
	* 
	* Эта функция должна быть вызвана перед использованием методов GetKeyDown, GetKeyUp или GetKey.
	*
	* @param window Указатель на окно GLFW, для которого настраивается обработка ввода.
	*/
	static void Init(GLFWwindow* window);

	/*
	* @brief Обновляет подсистему обработкм событий ввода.
	* 
	* Эта функция должна быть вызвана в каждом кадре перед использованием методов GetKeyDown, GetKeyUp или GetKey.
	*/
	static void Update();

	/**
	* @brief Возвращает true, если пользователь удерживает клавишу, идентифицированной параметром key перечисления \ref KeyCode
	*/
	static bool GetKey(KeyCode key);

	/**
	* @brief Возвращает true, если на протяжении кадра пользователь отпустил клавишу, идентифицированной параметром key перечисления \ref KeyCode
	*/
	static bool GetKeyUp(KeyCode key);

	/**
	* @brief Возвращает true, если на протяжении кадра пользователь начинает выполнять нажатие клавиши, идентифицированной параметром key перечисления \ref KeyCode
	*/
	static bool GetKeyDown(KeyCode key);

private:

	/*
	* @brief Приватный конструктор по умолчанию, чтобы нельзя было создать экземпляр данного класса.
	*/
	Input() = default;

	/**
	* @brief Запрещаем копирующий конструктор.
	*/
	Input(const Input&) = delete;
	
	/**
	* @brief Запрещаем оператор копирования.
	*/
	Input& operator=(const Input&) = delete;

	/**
     * @brief Callback-функция для обработки событий клавиатуры.
     *
     * Эта функция автоматически вызывается GLFW при каждом нажатии или отпускании
     * клавиши. Она обновляет массивы _currentStateKeyboard и _previousStateKeyboard
     * для отслеживания состояний клавиш.
     *
     * @param window Указатель на окно GLFW, в котором произошло событие.
     * @param key Код клавиши, которая была нажата или отпущена (например, GLFW_KEY_A).
     * @param scancode Скан-код клавиши, зависит от клавиатуры.
     * @param action Тип действия: GLFW_PRESS (нажатие), GLFW_RELEASE (отпускание).
     * @param mods Модификаторы клавиш (например, GLFW_MOD_SHIFT, GLFW_MOD_CONTROL).
     */
	static void OnKeyCallback(GLFWwindow* window, int key, int scancode, int action, int mods);

	/**
	* @brief Флаг, отвечающий за то, была ли инициализирована подсистема обработки ввода
	*/
	static bool _initialized;

	/**
	 * @brief Массив, хранящий текущее состояние клавиш клавиатуры.
	 *
	 * Каждый элемент массива соответствует определенному коду клавиши (например,
	 * GLFW_KEY_A, GLFW_KEY_SPACE). Если значение элемента равно true, то
	 * клавиша в данный момент нажата, иначе - клавиша отпущена.
	 *
	 * Размер массива (1024) определяет максимальное количество клавиш,
	 * которые могут отслеживаться.
	 *
	 * @note Используйте коды клавиш GLFW (например, GLFW_KEY_A) в качестве индексов
	 *       при доступе к этому массиву.
	 */
	static bool _currentStateKeyboard[1024];

	/**
	 * @brief Массив, хранящий состояние клавиш клавиатуры в предыдущем кадре.
	 *
	 *  Этот массив используется для определения событий нажатия и отпускания клавиш.
	 *  Сравнивая _currentStateKeyboard и _previousStateKeyboard, можно определить,
	 *  какие клавиши были нажаты или отпущены в текущем кадре.
	 *
	 *  Размер массива (1024) должен соответствовать размеру _currentStateKeyboard.
	 *
	 * @note Используйте коды клавиш GLFW (например, GLFW_KEY_A) в качестве индексов
	 *       при доступе к этому массиву.
	 */
	static bool _previousStateKeyboard[1024];
};